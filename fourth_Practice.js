
// ------------////////////////------assignment----------/////////////------------


// Регулярные выражения используются в языках программирования для сопоставления частей строк. Вы создаете шаблоны, чтобы помочь вам сделать это сопоставление.

// Если вы хотите найти слово theв строке The dog chased the cat, вы можете использовать следующее регулярное выражение: /the/. Обратите внимание, что в регулярном выражении не требуются кавычки.

// В JavaScript есть несколько способов использования регулярных выражений. Один из способов проверить регулярное выражение — использовать .test() метод. Метод .test()принимает регулярное выражение, применяет его к строке (которая помещается в круглые скобки) и возвращает trueили false, если ваш шаблон что-то находит или нет.

// let testStr = "freeCodeCamp";
// let testRegex = /Code/;
// testRegex.test(testStr);
// Метод test здесь возвращает true.

// Примените регулярное выражение myRegex к строке myString, используя .test()метод.


//----------///////////------Answer-----------///////////--------------------

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line


// ------------////////////////------assignment----------/////////////------------

// В последнем задании вы искали слово, Hello используя регулярное выражение /Hello/. Это регулярное выражение искало буквальное совпадение строки Hello. Вот еще один пример поиска буквального совпадения строки Kevin:

// let testStr = "Hello, my name is Kevin.";
// let testRegex = /Kevin/;
// testRegex.test(testStr);
// Этот testвызов вернется true.

// Любые другие формы Kevin не будут соответствовать. Например, регулярное выражение /Kevin/ не будет соответствовать kevin или KEVIN.

// let wrongRegex = /kevin/;
// wrongRegex.test(testStr);
// Этот test вызов вернется false.

// Будущая задача покажет, как сопоставить и эти другие формы.

// Завершите регулярное выражение waldoRegex, чтобы найти "Waldo" в строке waldoIsHiding буквальное совпадение.

//----------///////////------Answer-----------///////////--------------------

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);

// ------------////////////////------assignment----------/////////////------------

// Используя регулярные выражения, такие как /coding/, вы можете искать шаблон coding в другой строке.

// Это мощный инструмент для поиска отдельных строк, но он ограничен только одним шаблоном. Вы можете искать несколько шаблонов, используя оператор alternation или : .OR|

// Этот оператор сопоставляет шаблоны либо до, либо после него. Например, если вы хотите сопоставить строки yes или no, вам нужно регулярное выражение /yes|no/.

// Вы также можете искать более двух шаблонов. Вы можете сделать это, добавив больше шаблонов с большим количеством OR операторов, разделяющих их, например /yes|no|maybe/.

// Заполните регулярное выражение petRegex, чтобы оно соответствовало домашним животным dog, cat, bird или fish.

//----------///////////------Answer-----------///////////--------------------

let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish|change/; // Change this line
let result = petRegex.test(petString);

// ------------////////////////------assignment----------/////////////------------

// До сих пор вы рассматривали регулярные выражения для буквального сопоставления строк. Но иногда вы можете захотеть также сопоставить различия в регистре.

// Регистр (или иногда регистр букв) — это разница между прописными и строчными буквами. Примеры прописных букв: A, B, и C. Примерами нижнего регистра являются a, bи c.

// Вы можете сопоставить оба случая, используя так называемый флаг. Есть и другие флаги, но здесь вы сосредоточитесь на флаге, который игнорирует регистр — iфлаг. Вы можете использовать его, добавив в регулярное выражение. Пример использования этого флага /ignorecase/i. Это регулярное выражение может соответствовать строкам ignorecase, igNoreCaseи IgnoreCase.

// Напишите регулярное выражение fccRegex для соответствия freeCodeCamp независимо от регистра. Ваше регулярное выражение не должно соответствовать никаким аббревиатурам или вариациям с пробелами.

//----------///////////------Answer-----------///////////--------------------

